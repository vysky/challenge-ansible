# turning the concept (create, moving and deleting files) of this lab into ansible playbook
# https://learn.acloud.guru/handson/8d1946ab-3035-4e5f-b735-d662fc761482/course/87e08bad-9655-4a7c-9f07-5dd44149b837

# block, rescue, always
# https://docs.ansible.com/ansible/latest/user_guide/playbooks_blocks.html

# state: absent, state: touch, state: directory
# https://docs.ansible.com/ansible/latest/collections/ansible/builtin/file_module.html#parameter-state

# copy
# https://docs.ansible.com/ansible/latest/collections/ansible/builtin/copy_module.html

# loop
# https://docs.ansible.com/ansible/latest/user_guide/playbooks_loops.html

# with_items
# https://docs.ansible.com/ansible/latest/collections/ansible/builtin/items_lookup.html

# with_fileglob
# https://docs.ansible.com/ansible/latest/collections/ansible/builtin/fileglob_lookup.html

# other links
# https://phoenixnap.com/kb/ansible-create-file

---
  - hosts: localhost
    become: yes
    vars:
      var_workingdir: ~/Downloads/github/challenge-ansible/challenge-1
      var_devdir: "{{ var_workingdir }}/1-dev"
      var_stagingdir: "{{ var_workingdir }}/2-staging"
      var_proddir: "{{ var_workingdir }}/3-prod"
    vars_files:
      - "{{ var_workingdir }}/files.txt"
    tasks:
    - name: task 0
      block:
        - name: task 0 - delete previously created files and directories
          file:
            path: "{{ item }}"
            state: absent
          with_items:
          - "{{ var_devdir }}"
          - "{{ var_stagingdir }}"
          - "{{ var_proddir }}"
          # use loop to remove logs.txt
          # - logs.txt
      rescue:
        - name: task 0 - error
          debug:
            msg: "task 0 error"
      always:
        - name: task 0 - logging
          # another way to remove logs.txt using shell
          shell: rm -f logs.txt; touch logs.txt
    - name: task 1
      block:
        - name: task 1.1 - check if dev directory exist
          stat:
            path: "{{ var_devdir }}"
          register: stat_devdir_exist
        - name: task 1.2 - check if stage directory exist
          stat:
            path: "{{ var_stagingdir }}"
          register: stat_stagingdir_exist
        - name: task 1.3 - check if prod direcotry exist
          stat:
            path: "{{ var_proddir }}"
          register: stat_proddir_exist
      rescue:
        - name: task 1 - error
          debug:
            msg: "task 1 error"
      always:
        - name: task 1 - logging
          shell: echo "task 1 completed" >> logs.txt
    - name: task 2
      block:
        - name: task 2.1 - create files directory
          file:
            path: "{{ var_devdir }}"
            state: directory
          when: not stat_devdir_exist.stat.exists
        - name: task 2.2 - create staging directory
          file:
            path: "{{ var_stagingdir }}"
            state: directory
          when: not stat_stagingdir_exist.stat.exists
        - name: task 2.3 - create prod directory
          file:
            path: "{{ var_proddir }}"
            state: directory
          when: not stat_proddir_exist.stat.exists
      rescue:
        - name: task 2 - error
          debug:
            msg: "task 2 error"
      always:
        - name: task 2 - logging
          shell: echo "task 2 completed" >> logs.txt
    - name: task 3
      block:
        # create files based on the items in files.txt
        - name: task 3 - create files in dev
          file:
            path: "{{ var_devdir }}/{{ item }}"
            state: touch
          loop: "{{ files }}"
          notify: handler_created
      rescue:
        - name: task 3 - error
          debug:
            msg: "task 3 error"
      always:
        - name: task 3 - logging
          shell: echo "task 3 completed" >> logs.txt
    - name: task 4
      block:
        # copy files using ansible built in copy command
        - name: task 4 - copy files from dev to staging
          copy:
            src: "{{ item }}"
            dest: "{{ var_stagingdir }}"
            remote_src: yes
          # copy files matching a pattern, in this case, all files since wildcard
          with_fileglob:
            - "{{ var_devdir }}/*"
          notify: handler_renamed
      rescue:
        - name: task 4 - error
          debug:
            msg: "task 4 error"
      always:
        - name: task 4 - logging
          shell: echo "task 6 completed" >> logs.txt
    - name: task 5
      block:
        # copy files using shell command
        - name: task 5 - copy files from staging to prod
          shell: "cp {{ var_stagingdir }}/* {{ var_proddir }}"
          notify: handler_copied
      rescue:
        - name: task 5 - error
          debug:
            msg: "task 5 error"
      always:
        - name: task 5 - logging
          shell: echo "task 5 completed" >> logs.txt
    handlers:
    - name: files created
      debug:
        msg: "files created"
      listen: handler_created
    - name: files renamed
      debug:
        msg: "files renamed"
      listen: handler_renamed
    - name: files copied
      debug:
        msg: "files copied"
      listen: handler_copied